name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version'
        required: true
        default: '1.0.0'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi
        
    - name: Build binaries
      run: |
        chmod +x build.sh
        ./build.sh ${{ steps.version.outputs.version }}
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.version }}
        release_name: GNode v${{ steps.version.outputs.version }}
        body: |
          ## GNode v${{ steps.version.outputs.version }}
          
          ### Installation
          
          **One-line install:**
          ```bash
          curl -fsSL https://raw.githubusercontent.com/${{ github.repository }}/main/install.sh | bash
          ```
          
          **Manual install:**
          1. Download the binary for your platform
          2. Extract and place in your PATH
          3. Run `gnode help` to get started
          
          ### Changes
          - Release v${{ steps.version.outputs.version }}
          
        draft: false
        prerelease: false
        
    - name: Upload Release Assets
      run: |
        for file in dist/*.tar.gz; do
          echo "Uploading $file"
          curl \
            -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/gzip" \
            --data-binary @"$file" \
            "${{ steps.create_release.outputs.upload_url }}?name=$(basename $file)"
        done
        
        # Upload checksums
        curl \
          -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: text/plain" \
          --data-binary @"dist/checksums.txt" \
          "${{ steps.create_release.outputs.upload_url }}?name=checksums.txt"
          
        # Upload install script
        curl \
          -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: text/plain" \
          --data-binary @"dist/install.sh" \
          "${{ steps.create_release.outputs.upload_url }}?name=install.sh"